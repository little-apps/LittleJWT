<?php

namespace LittleApps\LittleJWT\Testing;

use Illuminate\Contracts\Foundation\Application;
use Illuminate\Support\Traits\ForwardsCalls;

use Jose\Component\Core\JWK;

use LittleApps\LittleJWT\JWT\JWT;
use LittleApps\LittleJWT\LittleJWT as RealLittleJWT;
use LittleApps\LittleJWT\Validation\Valid;
use LittleApps\LittleJWT\Validation\Validatables\StackValidatable;
use LittleApps\LittleJWT\Validation\Validator;

/**
 * @mixin \LittleApps\LittleJWT\LittleJWT
 */
class LittleJWT extends RealLittleJWT
{
    use ForwardsCalls;

    public function __construct(Application $app, JWK $jwk)
    {
        parent::__construct($app, $jwk);
    }

    /**
     * Creates a Valid instance for checking if a JWT is valid.
     *
     * @param JWT $jwt JWT instance to validate (generated by parseToken() method)
     * @return Valid Valid instance (before validation is done)
     */
    public function validJWT(JWT $jwt)
    {
        return new TestValid($this->app, $jwt, $this->jwk);
    }

    /**
     * Creates a Valid instance for checking if a JWT is valid.
     * The default callback is not added when testing.
     *
     * @param JWT $jwt
     * @param callable $callback Callable that receives TestValidator to set assertions for JWT.
     * @param bool $applyDefault If true, the default validatable is used first. (default: false)
     * @return bool True if token is valid.
     */
    public function validateJWT(JWT $jwt, callable $callback = null, $applyDefault = false)
    {
        $callbacks = [];

        // Default callback is not added because it expects Validator and not TestValidator
        if (! is_null($callback)) {
            array_push($callbacks, $callback);
        }

        $validatable = new StackValidatable($callbacks);

        return parent::validateJWT($jwt, $validatable, $applyDefault);
    }
}
