<?php

namespace LittleApps\LittleJWT\Core\Concerns;

use LittleApps\LittleJWT\JWT\JsonWebToken;
use LittleApps\LittleJWT\Validation\Valid;
use LittleApps\LittleJWT\Validation\Validatables\StackValidatable;
use LittleApps\LittleJWT\Validation\ValidatedJsonWebToken;

trait HandlesValidate
{
    /**
     * Validates a JSON Web Token (JWT).
     *
     * @param JsonWebToken $jwt JWT instance to validate.
     * @param callable(\LittleApps\LittleJWT\Validation\Validator): void $callback Callable that receives Validator to set rules for JWT.
     * @param bool $applyDefault If true, the default validatable is used first. (default: true)
     * @return ValidatedJsonWebToken Validated JWT
     */
    public function validate(JsonWebToken $jwt, callable $callback = null, $applyDefault = true)
    {
        if ($applyDefault) {
            $callbacks = [$this->createCallbackBuilder()->createValidatableCallback()];

            if (is_callable($callback)) {
                array_push($callbacks, $callback);
            }

            $passthrough = new StackValidatable($callbacks);
        } else {
            // No need to create a StackValidatable instance for just 1 validatable
            $passthrough = $callback;
        }

        $valid = $this->valid($jwt);

        if (is_callable($passthrough)) {
            $valid->passValidatorThru($passthrough);
        }

        // Run the JWT through a Valid instance and return the result.
        return new ValidatedJsonWebToken($jwt, $valid->passes());
    }

    /**
     * Validates a JSON Web Token.
     *
     * @param string $token
     * @param callable|null $callback
     * @param boolean $applyDefault
     * @return boolean True if valid, false if not valid or token cannot be parsed.
     */
    public function validateToken(string $token, callable $callback = null, $applyDefault = true) {
        $jwt = $this->parse($token);

        if (is_null($jwt)) {
            return false;
        }

        return $this->validate($jwt, $callback, $applyDefault)->passes();
    }

    /**
     * Creates a Valid instance for validating a JWT.
     *
     * @param JsonWebToken $jwt JWT instance to validate (generated by parseToken() method)
     * @return Valid Valid instance (before validation is done)
     */
    public function valid(JsonWebToken $jwt)
    {
        $valid = new Valid($this->app, $jwt, $this->jwk);

        return $valid;
    }
}
